@startuml

!pragma teoz true
skinparam style strictuml
skinparam sequenceMessageAlign left
skinparam sequenceArrowColor #blue
skinparam maxMessageSize 500
autonumber "<font color='red'><b><u>##</u></b></font>"

actor "User\n__Resource Owner__" as usr
participant "Browser" as brw
participant "Web App\n__Resource Server Client__" as clt
participant "__Authorization Server__" as ath
participant "API to Protect\n__Resource Server__" as rsr

group #IMPLEMENTATION get the user's authorization (the code)
	usr -> brw : Go to home page
	brw -> clt : GET /home
	clt -> clt : Generate random //<state>//
	clt -> clt : Generate random 32 bytes //<code verifier>//
	clt -> clt : Store //<code verifier>//
	clt -> clt : Calculate //<challenge>// = BASE64URL-encode ( SHA-256 ( //<code verifier>// ) )
	clt --> brw : HTTP 302 Found
		note right
			__header__
			__Location__: https:////<authorization server host name>///authorize
								?response_type=code
								&client_id=//<client id>//
								&scope=//<scope>//
								&redirect_uri=https%3A%2F%2F//<resource server client host name>//%2Fcallback
								&state=//<state>//
								&code_challenge=//<challenge>//
								&code_challenge_method=S256
			__note__
			**response_type**
			Deve essere valorizzato con **code**.
			
			**client_id**
			Identifica __Resource Server Client__ su __Authorization Server__ e viene assegnato quando viene
			registrata.
			
			**scope**
			Elenco di stringhe (separate da uno spazio che quindi nell'url diventa %20), capite sia da
			__Resource Server__ che da __Authorization Server__, che identificano cosa vuol fare
			__Resource Server Client__ tramite il token richiesto.
			Deve contenere anche lo scope **openid**.
			Se viene indicato anche lo scope **offline_access**, verrà restituito anche un refresh token,
			insieme all'access token.
			
			**redirect_uri**
			URL di callback cui verranno inviati i parametri autorizzativi da parte di __Authorization Server__.
			Deve essere dichiarata in fase di registrazione di __Resource Server Client__.
			
			**state**
			Valore che verrà inviato insieme ai parametri autorizzativi da parte dell'__Authorization Server__
			quando richiederà la redirect verso l'URL di callback sopra indicata.
			
			**code_challenge**
			The BASE64URL-encoded SHA-256 hash di una sequenza casuale di 32 byte chiamata **code verifier** che
			il __Resource Server Client__ genera e memorizza, per prevenire code injection e attacchi CSRF.
			
			**code_challenge_method**
			Deve essere valorizzato con **S256**.
		end note
	brw -> ath : GET /authorize\n\t?response_type=code\n\t&client_id=//<client id>//\n\t&scope=//<scope>//\n\t&redirect_uri=https%3A%2F%2F//<resource server client host name>//%2Fcallback\n\t&state=//<state>//\n\t&code_challenge=//<challenge>//\n\t&code_challenge_method=S256
	ath -> ath : Verify //<client id>// and **redirect_uri**
		note left
			If //<client id>// and/or **redirect_uri** is wrong, a HTTP 401 will be returned.
		end note
	
	note across
		If the Merchant chooses to enter with Merchant App, the following //opt// block is not executed: here the __Authorization Server__ must receive the **external access token** that must be validated.
	end note
	
	opt #STRATEGY If session cookie isn't present
		ath --> brw : Consent for //<scope>// and login form
		brw --> usr : Consent for //<scope>// and login form
		usr -> brw : Login credentials and allow //<scope>//
		brw -> ath : Login credentials and allow //<scope>//
		ath -> ath : Verify login crendentials and //<scope>// acceptance
		note left
			If credentials are wrong and/or //<scope>// is not accepted by the user,
			the response will be:
			
			HTTP 302 Found
			__Location__: https:////<resource server client host name>///callback
 					?error=access_denied
 					&state=//<state>//
		end note
	end opt
	
	ath --> brw : HTTP 302 Found
		note right
			__header__
			__Location__: https:////<resource server client host name>///callback
 					?code=//<authorization code>//
 					&state=//<state>//
		end note
end group

group #Aquamarine exchange the code for the token
	brw -> clt : GET /callback\n\t?code=//<code>//\n\t&state=//<state>//
	clt -> ath : POST /token\n\tgrant_type=authorization_code\n\t&code=//<authorization code>//\n\t&redirect_uri=https%3A%2F%2F//<resource server client host name>//%2Fcallback\n\t&code_verifier=//<code verifier>//\n\t&client_id=//<client id>//
	ath -> ath : Verify //<code>//, **redirect_uri**, //<code verifier>// (by means of //<chellenge>// received previously) and //<client id>//
	ath -> clt : HTTP 200 (ok)
		note right
			__body__
			{
				"id_token": "//<id token>//"
				"access_token": "//<access token>//",
				"token_type": "Bearer",
				"expires_in": //<duration in millis>//,
				"refresh_token" : "//<refresh token>//"
			}
			__note__
			**id_token**
			Contains information on user.
			For our purpose, this is useless, so it is omitted.
			
			**refresh_token**
			It is returned only if in the //<scope>// there is **offline_access**.
			It is an opaque token.
			
			**access_token**
			It can be opaque token or a JWT. For our purpose it is a JWT.
			It is made up of:
			
				BASE64URL-encode(//<header>//).BASE64URL-encode(//<payload>>//).//<signature>//
			
			When it is decoded, it has the following format:
			
				__//<header>//__
					{
						"alg": "HS256",
						"kid": "//<key id>//"
					}
			
				__//<payload>//__
					{
						"exp": //<expiration time>//,
						"aud": "https:////<resource server host name>//",
						"iss": "https:////<authorization server host name>//"
						"scope": "//<grants>//"
					}
			
			**__ATTENTION__**
			During the execution of GET /authorize, when the __Authorization Server__ identifies
			the user (the Merchant in our scenario), it must choose the //<grants>// for the user.
		end note
	clt --> brw : HTTP 200 (ok)
		note right
			__body__
			{
				"id_token": "//<id token>//"
				"access_token": "//<access token>//",
				"token_type": "Bearer",
				"expires_in": //<duration in millis>//,
				"refresh_token" : "//<refresh token>//"
			}
		end note
	brw -> brw : Store //<refresh token>// and //<access token>// by means of Web Workers
	brw --> usr : HTTP 200 (ok)
end group

group #APPLICATION access token usage
	usr -> brw : Some action that involves invoking an API
	brw -> clt : Some request that involves invoking an API
	clt -> clt : API request crafting
	clt -> rsr : API request
		note left
			__header__
			__Authorization__: Bearer //<access token>//
		end note
	
	group #Azure by means of APIM policy
		rsr -> ath : GET /.well-known/openid-configuration
		ath --> rsr : HTTP 200 (ok)
			note right
				{
					"issuer": "https:////<authorization server host name>//",
					"authorization_endpoint": "https:////<authorization server host name>///authorize",
					"token_endpoint": "https:////<authorization server host name>///token",
					"jwks_uri": "https:////<authorization server host name>///keys",
					"response_types_supported": [
						"code"
					],
					"subject_types_supported": [
						"pairwise"
					]
					"id_token_signing_alg_values_supported": [
						"none"
					]
				}
			end note
			
			note left
				__Resource Server__ should cache this information.
			end note

		rsr -> ath : GET /keys
		ath --> rsr : HTTP 200 (ok)
			note right
				__body__
				{ 
					"keys" : [
						{ 
							"kty" : "RSA",
							"kid" : "//<key id>//",
							"use" : "sig",
							"n" : "//<modulus>//",
							"e" : "//<public exponent>//"
						},
						.
						.
						.
					]
				}
			end note

			note left
				__Resource Server__ should cache this information.
			end note
	
		rsr -> rsr : Verify //<access token>// //<signature>//, selecting the right key by means of //<key id>//
		rsr -> rsr : Verify //<access token>// //<expiration time>//
		rsr -> rsr : Verify //<access token>// audience (aud)
		rsr -> rsr : Verify //<access token>// issuer (iss)
		rsr -> rsr : Verify //<access token>// //<grants>//
			note left
				This is specific per operation so
				each operation must have a policy.
			end note
	end group
	
	rsr -> rsr : Execute business logic
	rsr --> clt : Response
	clt --> usr : Response
end group
@enduml
@startuml
!pragma teoz true
skinparam style strictuml
skinparam shadowing false
skinparam sequenceMessageAlign center

actor "User" as user

box POS #GhostWhite
	participant "PagoPA App" as app
    participant "CB2 App" as cb2
end box

box PagoPA #GhostWhite
	participant "Multi-channel\nIntegration Layer" as mil
	participant "Database" as db
end box

box Acquirer #GhostWhite
	participant "POS Master Data" as master
end box

== Registration ==
app    ->  cb2    : Get terminal data
cb2    --> app    : //<terminal id>//, //<acquirer id>//, //<terminal serial number>//
app    ->  app    : Generate RSA key pair (P<sub>term</sub> + S<sub>term</sub>)
app    ->  app    : Store RSA key pair
app    ->  mil    : Register (__in__: P<sub>term</sub>, //<terminal id>//, //<acquirer id>//, //<terminal serial number>//)
mil    ->  master : Check //<terminal id>//, //<terminal serial number>//
master --> mil    : Ok
mil    ->  db     : Store P<sub>term</sub>, //<terminal id>//, //<acquirer id>//
db     --> mil    : Ok
mil    --> app    : Ok

== Usage ==
app    ->  app    : Generate //<jwt>// signed with S<sub>term</sub>
app    ->  mil    : //Generic request//
	rnote left
		__header__
		- Authorization: Bearer //<jwt>//
		- Version: //<api version>//
		- AcquirerId: //<acquirer id>//
		- Channel: //<channel>//
		- TerminalId: //<terminal id>//
	end note
mil    ->  mil : Check //<jwt>//.//<tid>// == header.TerminalId
mil    ->  mil : Check //<jwt>//.//<iat>//
mil    ->  db  : Retrieve P<sub>term</sub> by //<terminal id>// and //<acquirer id>//
db     --> mil : P<sub>term</sub>
mil    ->  mil : Check //<jwt>// signature by means of P<sub>term</sub>
mil    ->  mil : //Generic processing//
mil    --> app : //Generic response//

@enduml

@startuml
!pragma teoz true
skinparam style strictuml
skinparam maxMessageSize 200
skinparam shadowing false
skinparam sequenceMessageAlign center
autonumber "<font color='blue'><b><u>##</u></b></font>"

actor "POS Installer" as installer
participant "POS" as pos
participant "mil-auth" as mil
participant "Azure AD" as azure_ad
participant "Azure Storage\nAccount" as azure_st
database "pos-registry\n(MongoDB)" as registry
database "cache\n(Redis)" as cache

activate installer

installer -> pos ++ : start app

pos -> mil ++ : POST /device/code
	note left
		__header__
		RequestId: //<request id>//
		__body__
		client_id=//<client id>//
		&&gtId=//<gt id>//
		&&terminalId=//<terminal id>//
	end note

group verify client id
	group get azure access token
		mil -> azure_ad ++ : GET //${IDENTITY_ENDPOINT}//?api-version=2019-08-01\n&resource=https://storage.azure.com
			note left
				__header__
				x-identity-header: //${IDENTITY_HEADER}//
			end note

		azure_ad --> mil -- : HTTP 200 (ok) 
			note right
				__body__
				{
					"token_type": "Bearer",
					"expires_on": //don't care//,
					"client_id": "//don't care//",
					"resource": "//don't care//"
					"access_token": "//<access token for storage account>//"
				}
			end note

		note over mil #Orange
			On any failure, return HTTP 500 (server error) with specific error body. 
		end note
	end

	group get client id file
		mil -> azure_st ++ : GET //<storage account base url>///clients///<client id>//.json
			note left
				__header__
				x-ms-version: 2019-07-07
				Authorization: Bearer //<access token for storage account>//
			end note

		azure_st --> mil -- : HTTP 200 (ok)
			note right
				__body__
				{
					"id": "//<client id>//",
					"channel": "POS"
				}
			end note
	end
end

note over mil #Orange
	On //<client id>// file not found, return HTTP 401 (unauthorized) with specific error body.
	On any other failure, return HTTP 500 (server error) with specific error body. 
end note

mil -> mil : verify channel

note over mil #Orange
	On channel mismatch, return HTTP 401 (unauthorized) with specific error body.
end note

group get terminal data
	mil -> registry ++ : findBy(//query document//)
		note left
			__//query document//__
			{
				"gtId": "//<gt id>//",
				"terminalId": "//<terminal id>//"
			}
		end note

	registry --> mil -- : //document//
		note right
			__//document//__
			{
				"uuid": "//<terminal uuid>//"
				"gtId": "//<gt id>//",
				"terminalId": "//<terminal id>//",
				"payeeCode": "//<payee code>//",
				"slave": "//<slave>//",
				"pagoPa": "//<pagopa>//",
				"pspId": "//<psp id>//",
				"brokerId": "//<broker id>//",
				"channelId": "//<channel id>//",
				"idpay": "//<idpay>//"
			}
		end note
end
	
note over mil #Orange
	On terminal not found, return HTTP 401 (unauthorized) with specific error body.
	On any other failure, return HTTP 500 (server error) with specific error body. 
end note
	
mil -> mil : generate 8ch length base20 string as //<user code>//

group store user code
	mil -> cache ++ : put(//<user code>//, //<terminal uuid>//) with expiration time equals to //<expires is>//
	cache --> mil -- : ok
end

note over mil #Orange
	On any failure, return HTTP 500 (server error) with specific error body. 
end note

mil --> pos -- : HTTP 200 (ok)
	note right
		__body__
		{
			"device_code": "//<terminal uuid>//",
			"user_code": "//<user code>//",
			"expires_in": //<expires is>//,
			"interval": //<interval>//
		}
		end note

pos --> installer --: //<user code>//

deactivate installer
@enduml